#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "s21_math.h"

int equal(double result, long double s21_result) {
  if ((isnan(result) && isnan(s21_result)) || (isinf(result) && isinf(s21_result))) {
    return 1;
  } else if (fabs(result) != 0.0 && fabs((double)s21_result) != 0.0) {
    int count = (int)log10(fabs(result));
    result = (int)(result * pow(10, (16 - count))) / pow(10, (16 - count));
    s21_result = (int)(s21_result * pow(10, (16 - count))) / pow(10, (16 - count));
    if (result == s21_result) {
      return 1;
    } else {
      return 0;
    }
  } else {
    return 1;
  }
}

#test abs_test
for (int i = -10; i < 11; ++i) {
    ck_assert_int_eq(abs(i), s21_abs(i));
}
ck_assert_double_infinite(abs(INF), s21_abs(INF));
ck_assert_double_nan(abs(NAN), s21_abs(NAN));

#test acos_test
printf("\n====acos====\n");
double x = -1.0;
long double s21_result;
double result;
while (x <= 1.0) {
    s21_result = s21_acos(x);
    result = acos(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)acos(x) - (double)s21_acos(x)));
    x += 0.01;
}
ck_assert_double_infinite(acos(INF), s21_acos(INF));
ck_assert_double_nan(acos(NAN), s21_acos(NAN));

#test asin_test
printf("\n====asin====\n");
double x = -1.0;
long double s21_result;
double result;
while (x <= 1.0) {
    s21_result = s21_asin(x);
    result = asin(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)asin(x) - (double)s21_asin(x)));
    x += 0.01;
}
ck_assert_double_infinite(asin(INF), s21_asin(INF));
ck_assert_double_nan(asin(NAN), s21_asin(NAN));

#test atan_test
printf("\n====atan====\n");
double x = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    s21_result = s21_atan(x);
    result = atan(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)atan(x) - (double)s21_atan(x)));
    x += 0.01;
}
ck_assert_double_infinite(atan(INF), s21_atan(INF));
ck_assert_double_nan(atan(NAN), s21_atan(NAN));

#test ceil_test
printf("\n====ceil====\n");
double x = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    s21_result = s21_ceil(x);
    result = ceil(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)ceil(x) - (double)s21_ceil(x)));
    x += 0.01;
}
ck_assert_double_infinite(ceil(INF), s21_ceil(INF));
ck_assert_double_nan(ceil(NAN), s21_ceil(NAN));

#test cos_test
printf("\n====cos====\n");
double x = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    s21_result = s21_cos(x);
    result = cos(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)cos(x) - (double)s21_cos(x)));
    x += 0.01;
}
ck_assert_double_infinite(cos(INF), s21_cos(INF));
ck_assert_double_nan(cos(NAN), s21_cos(NAN));

#test exp_test
printf("\n====exp====\n");
double x = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    s21_result = s21_exp(x);
    result = exp(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)exp(x) - (double)s21_exp(x)));
    x += 0.01;
}
ck_assert_double_infinite(exp(INF), s21_exp(INF));
ck_assert_double_nan(exp(NAN), s21_exp(NAN));

#test fabs_test
printf("\n====fabs====\n");
double x = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    s21_result = s21_fabs(x);
    result = fabs(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)fabs(x) - (double)s21_fabs(x)));
    x += 0.01;
}
ck_assert_double_infinite(fabs(INF), s21_fabs(INF));
ck_assert_double_nan(fabs(NAN), s21_fabs(NAN));

#test floor_test
printf("\n====floor====\n");
double x = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    s21_result = s21_floor(x);
    result = floor(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)floor(x) - (double)s21_floor(x)));
    x += 0.01;
}
ck_assert_double_infinite(floor(INF), s21_floor(INF));
ck_assert_double_nan(floor(NAN), s21_floor(NAN));

#test log_test
printf("\n====log====\n");
double x = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    s21_result = s21_log(x);
    result = log(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)log(x) - (double)s21_log(x)));
    x += 0.1;
}
ck_assert_double_infinite(log(INF), s21_log(INF));
ck_assert_double_nan(log(NAN), s21_log(NAN));

#test sin_test
printf("\n====sin====\n");
double x = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    s21_result = s21_sin(x);
    result = sin(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)sin(x) - (double)s21_sin(x)));
    x += 0.01;
}
ck_assert_double_infinite(sin(INF), s21_sin(INF));
ck_assert_double_nan(sin(NAN), s21_sin(NAN));

#test sqrt_test
printf("\n====sqrt====\n");
double x = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    s21_result = s21_sqrt(x);
    result = sqrt(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)sqrt(x) - (double)s21_sqrt(x)));
    x += 0.1;
}
ck_assert_double_infinite(sqrt(INF), s21_sqrt(INF));
ck_assert_double_nan(sqrt(NAN), s21_sqrt(NAN));

#test tan_test
printf("\n====tan====\n");
double x = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    s21_result = s21_tan(x);
    result = tan(x);
    if (!equal(result, s21_result)) {
      printf("%f --- %.6f != %.6Lf ", x, result, s21_result);
      printf("FAIL\n");
    }
    ck_assert_int_le(0.000001, fabs((double)tan(x) - (double)s21_tan(x)));
    x += 0.01;
}
ck_assert_double_infinite(tan(INF), s21_tan(INF));
ck_assert_double_nan(tan(NAN), s21_tan(NAN));

#test fmod_test
printf("\n====fmod====\n");
double x = -100.0, y = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    while (y <= 100.0) {
        s21_result = s21_fmod(x, y);
        result = fmod(x, y);
        if (!equal(result, s21_result)) {
            printf("%f %f--- %.6f != %.6Lf ", x, y, result, s21_result);
            printf("FAIL\n");
        }
        ck_assert_int_le(0.000001, fabs((double)fmod(x, y) - (double)s21_fmod(x, y)));
        y += 0.01;
    }
    x += 0.01;
}
ck_assert_double_infinite(fmod(INF), s21_fmod(INF));
ck_assert_double_nan(fmod(NAN), s21_fmod(NAN));
ck_assert_double_infinite(fmod(INF), s21_fmod(NAN));
ck_assert_double_nan(fmod(NAN), s21_fmod(INF));

#test pow_test
printf("\n====pow====\n");
double x = -100.0, y = -100.0;
long double s21_result;
double result;
while (x <= 100.0) {
    while (y <= 100.0) {
        s21_result = s21_pow(x, y);
        result = pow(x, y);
        if (!equal(result, s21_result)) {
          printf("%f %f--- %.6f != %.6Lf ", x, y, result, s21_result);
          printf("FAIL\n");
        }
        ck_assert_int_le(0.000001, fabs((double)pow(x, y) - (double)s21_pow(x, y)));
        y += 0.01;
    }
    x += 0.01;
}
ck_assert_double_infinite(pow(INF), s21_pow(INF));
ck_assert_double_nan(pow(NAN), s21_pow(NAN));
ck_assert_double_infinite(pow(INF), s21_pow(NAN));
ck_assert_double_nan(pow(NAN), s21_pow(INF));